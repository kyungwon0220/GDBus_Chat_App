/*
 * Generated by gdbus-codegen-glibmm 2.42.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#include "msg_api_proxy.h"

#include <utility>

template<class T>
inline T specialGetter(Glib::Variant<T> variant)
{
    return variant.get();
}

template<>
inline std::string specialGetter(Glib::Variant<std::string> variant)
{
    // String is not guaranteed to be null-terminated, so don't use ::get()
    gsize n_elem;
    gsize elem_size = sizeof(char);
    char* data = (char*)g_variant_get_fixed_array(variant.gobj(), &n_elem, elem_size);

    return std::string(data, n_elem);
}

/**
 * Methods
 */
void App::ChatMessenger::interface::MessageProxy::SendMsg(
    const Glib::ustring & arg_message,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = MessageTypeWrap::SendMsg_pack(
        arg_message);

    m_proxy->call("SendMsg", callback, cancellable, base, timeout_msec);
}

void App::ChatMessenger::interface::MessageProxy::SendMsg_finish(
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);
}

void
App::ChatMessenger::interface::MessageProxy::SendMsg_sync(
    const Glib::ustring & arg_message,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = MessageTypeWrap::SendMsg_pack(
        arg_message);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("SendMsg", cancellable, base, timeout_msec);

}

void App::ChatMessenger::interface::MessageProxy::NotifyTyping(
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;

    m_proxy->call("NotifyTyping", callback, cancellable, base, timeout_msec);
}

void App::ChatMessenger::interface::MessageProxy::NotifyTyping_finish(
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);
}

void
App::ChatMessenger::interface::MessageProxy::NotifyTyping_sync(
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("NotifyTyping", cancellable, base, timeout_msec);

}

/**
 * 인자 없음
 */
void App::ChatMessenger::interface::MessageProxy::UserStopTyping(
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;

    m_proxy->call("UserStopTyping", callback, cancellable, base, timeout_msec);
}

void App::ChatMessenger::interface::MessageProxy::UserStopTyping_finish(
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);
}

void
App::ChatMessenger::interface::MessageProxy::UserStopTyping_sync(
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("UserStopTyping", cancellable, base, timeout_msec);

}

/**
 * Signals
 */

void App::ChatMessenger::interface::MessageProxy::handle_signal(const Glib::ustring&/* sender_name */,
    const Glib::ustring& signal_name,
    const Glib::VariantContainerBase& parameters)
{
    static_cast<void>(signal_name); // maybe unused
    static_cast<void>(parameters); // maybe unused

    if (signal_name == "NewMsgReceived") {
        if (parameters.get_n_children() != 2) return;
        Glib::Variant<Glib::ustring> base_user_name;
        parameters.get_child(base_user_name, 0);
        Glib::ustring p_user_name;
        p_user_name = base_user_name.get();

        if (parameters.get_n_children() != 2) return;
        Glib::Variant<Glib::ustring> base_message;
        parameters.get_child(base_message, 1);
        Glib::ustring p_message;
        p_message = base_message.get();

        NewMsgReceived_signal.emit((p_user_name), (p_message));
    }
    if (signal_name == "UserTyping") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<Glib::ustring> base_user_name;
        parameters.get_child(base_user_name, 0);
        Glib::ustring p_user_name;
        p_user_name = base_user_name.get();

        UserTyping_signal.emit((p_user_name));
    }
    if (signal_name == "UserStoppedTyping") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<Glib::ustring> base_user_name;
        parameters.get_child(base_user_name, 0);
        Glib::ustring p_user_name;
        p_user_name = base_user_name.get();

        UserStoppedTyping_signal.emit((p_user_name));
    }
}

void App::ChatMessenger::interface::MessageProxy::handle_properties_changed(
    const Gio::DBus::Proxy::MapChangedProperties &changed_properties,
    const std::vector<Glib::ustring> &/* invalidated_properties */)
{
    static_cast<void>(changed_properties); // maybe unused

    // Only check changed_properties since value will already be cached. Glib can be setup to get
    // values of invalidated properties in which case property will be in changed_properties when
    // value is actually received. See Gio::DBus::ProxyFlags::PROXY_FLAGS_GET_INVALIDATED_PROPERTIES .

}

App::ChatMessenger::interface::MessageProxy::MessageProxy(const Glib::RefPtr<Gio::DBus::Proxy> &proxy) : m_proxy(proxy)
{
    m_proxy->signal_signal().connect(sigc::mem_fun(this, &MessageProxy::handle_signal));
    m_proxy->signal_properties_changed().
        connect(sigc::mem_fun(this, &MessageProxy::handle_properties_changed));
}

void App::ChatMessenger::interface::MessageProxy::createForBus(
    Gio::DBus::BusType busType,
    Gio::DBus::ProxyFlags proxyFlags,
    const std::string &name,
    const std::string &objectPath,
    const Gio::SlotAsyncReady &slot,
    const Glib::RefPtr<Gio::Cancellable> &cancellable)
{
    Gio::DBus::Proxy::create_for_bus(busType,
        name,
        objectPath,
        "App.ChatMessenger.interface.Message",
        slot,
        cancellable,
        Glib::RefPtr<Gio::DBus::InterfaceInfo>(),
        proxyFlags);
}

Glib::RefPtr<App::ChatMessenger::interface::MessageProxy> App::ChatMessenger::interface::MessageProxy::createForBusFinish(const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::RefPtr<Gio::DBus::Proxy> proxy =
        Gio::DBus::Proxy::create_for_bus_finish(result);
    App::ChatMessenger::interface::MessageProxy *p =
        new App::ChatMessenger::interface::MessageProxy(proxy);
    return Glib::RefPtr<App::ChatMessenger::interface::MessageProxy>(p);
}

Glib::RefPtr<App::ChatMessenger::interface::MessageProxy> App::ChatMessenger::interface::MessageProxy::createForBus_sync(
    Gio::DBus::BusType busType,
    Gio::DBus::ProxyFlags proxyFlags,
    const std::string &name,
    const std::string &objectPath,
    const Glib::RefPtr<Gio::Cancellable> &cancellable)
{
    Glib::RefPtr<Gio::DBus::Proxy> proxy =
        Gio::DBus::Proxy::create_for_bus_sync(busType,
            name,
            objectPath,
            "App.ChatMessenger.interface.Message",
            cancellable,
            Glib::RefPtr<Gio::DBus::InterfaceInfo>(),
            proxyFlags);
    App::ChatMessenger::interface::MessageProxy *p =
        new App::ChatMessenger::interface::MessageProxy(proxy);
    return Glib::RefPtr<App::ChatMessenger::interface::MessageProxy>(p);
}
